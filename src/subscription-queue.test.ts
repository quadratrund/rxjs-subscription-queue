import { expect, test } from '@jest/globals';
import { Observable, Subject, Subscription, tap } from 'rxjs';
import { SubscriptionQueue, subscriptionQueue } from './subscription-queue';
import { MultiSubject } from './multi-subject';

test('with multiple observables', () => {
  const queue: SubscriptionQueue = subscriptionQueue();
  const queueLengthEvents: number[] = [];
  queue.queueLengthObservable.subscribe((queueLength: number) => queueLengthEvents.push(queueLength));
  let queueLengthEventIndex: number = 0;
  const expectQueueLengthEvent = (length: number) => {
    expect(queue.queueLength).toBe(length);
    expect(queueLengthEvents[queueLengthEventIndex++]).toBe(length);
    expect(queueLengthEvents.length).toBe(queueLengthEventIndex);
  };
  expectQueueLengthEvent(0);

  const s1: Subject<void> = new Subject();
  const s2: Subject<void> = new Subject();
  const s3: Subject<void> = new Subject();
  let s1Cnt: number = 0;
  let s2Cnt: number = 0;
  let s3Cnt: number = 0;
  let s1Events: number = 0;
  let s2Events: number = 0;
  let s3Events: number = 0;

  s1.pipe(tap({ subscribe: () => s1Cnt++ }), queue).subscribe(() => s1Events++);
  expectQueueLengthEvent(1);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(0);
  s2.pipe(tap({ subscribe: () => s2Cnt++ }), queue).subscribe(() => s2Events++);
  expectQueueLengthEvent(2);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(0);
  expect(s2Cnt).toBe(0);
  expect(s2Events).toBe(0);
  s3.pipe(tap({ subscribe: () => s3Cnt++ }), queue).subscribe(() => s3Events++);
  expectQueueLengthEvent(3);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(0);
  expect(s2Cnt).toBe(0);
  expect(s2Events).toBe(0);
  expect(s3Cnt).toBe(0);
  expect(s3Events).toBe(0);
  s1.next();
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(0);
  expect(s2Events).toBe(0);
  expect(s3Cnt).toBe(0);
  expect(s3Events).toBe(0);
  s1.complete();
  expectQueueLengthEvent(2);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(1);
  expect(s2Events).toBe(0);
  expect(s3Cnt).toBe(0);
  expect(s3Events).toBe(0);
  s2.next();
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(1);
  expect(s2Events).toBe(1);
  expect(s3Cnt).toBe(0);
  expect(s3Events).toBe(0);
  s2.complete();
  expectQueueLengthEvent(1);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(1);
  expect(s2Events).toBe(1);
  expect(s3Cnt).toBe(1);
  expect(s3Events).toBe(0);
  s3.next();
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(1);
  expect(s2Events).toBe(1);
  expect(s3Cnt).toBe(1);
  expect(s3Events).toBe(1);
  s3.complete();
  expectQueueLengthEvent(0);
  expect(s1Cnt).toBe(1);
  expect(s1Events).toBe(1);
  expect(s2Cnt).toBe(1);
  expect(s2Events).toBe(1);
  expect(s3Cnt).toBe(1);
  expect(s3Events).toBe(1);
});


test('subscribing multiple times', () => {
  const queue: SubscriptionQueue = subscriptionQueue();
  const queueLengthEvents: number[] = [];
  queue.queueLengthObservable.subscribe((queueLength: number) => queueLengthEvents.push(queueLength));
  let queueLengthEventIndex: number = 0;
  const expectQueueLengthEvent = (length: number) => {
    expect(queue.queueLength).toBe(length);
    expect(queueLengthEvents[queueLengthEventIndex++]).toBe(length);
    expect(queueLengthEvents.length).toBe(queueLengthEventIndex);
  };
  expectQueueLengthEvent(0);

  const subject: MultiSubject<void> = new MultiSubject();
  const observable: Observable<void> = subject.pipe(queue);

  let aEvents: number = 0;
  let bEvents: number = 0;
  let cEvents: number = 0;

  const A: Subscription = observable.subscribe(() => aEvents++);
  expectQueueLengthEvent(1);
  expect(subject.subscribers.length).toBe(1);
  expect(aEvents).toBe(0);
  const B: Subscription = observable.subscribe(() => bEvents++);
  expectQueueLengthEvent(2);
  expect(subject.subscribers.length).toBe(1);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  expect(B.closed).toBe(false);
  B.unsubscribe();
  expectQueueLengthEvent(1);
  expect(subject.subscribers.length).toBe(1);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  const C: Subscription = observable.subscribe(() => cEvents++);
  expectQueueLengthEvent(2);
  expect(subject.subscribers.length).toBe(1);
  expect(subject.subscribers[0].active).toBe(true);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  expect(cEvents).toBe(0);
  expect(A.closed).toBe(false);
  A.unsubscribe();
  expectQueueLengthEvent(1);
  expect(subject.subscribers.length).toBe(2);
  expect(subject.subscribers[0].active).toBe(false);
  expect(subject.subscribers[1].active).toBe(true);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  expect(cEvents).toBe(0);
  subject.activeSubscribers[0].next();
  expect(subject.subscribers.length).toBe(2);
  expect(subject.subscribers[1].active).toBe(true);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  expect(cEvents).toBe(1);
  expect(C.closed).toBe(false);
  subject.activeSubscribers[0].complete();
  expect(C.closed).toBe(true);
  expectQueueLengthEvent(0);
  expect(subject.subscribers.length).toBe(2);
  expect(subject.subscribers[1].active).toBe(false);
  expect(aEvents).toBe(0);
  expect(bEvents).toBe(0);
  expect(cEvents).toBe(1);
});

